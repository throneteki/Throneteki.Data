// <auto-generated />
using System;
using CrimsonDev.Throneteki.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CrimsonDev.Throneteki.Data.Migrations
{
    [DbContext(typeof(ThronetekiDbContext))]
    [Migration("20190110215302_FlattenDecks")]
    partial class FlattenDecks
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CrimsonDev.Gameteki.Data.Models.BlockListEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BlockedUser");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BlockListEntry");
                });

            modelBuilder.Entity("CrimsonDev.Gameteki.Data.Models.GametekiRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CrimsonDev.Gameteki.Data.Models.GametekiUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CustomData");

                    b.Property<bool>("Disabled");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("EmailHash");

                    b.Property<DateTime>("LastLoginDate");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("RegisterIp");

                    b.Property<DateTime>("RegisteredDate");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CrimsonDev.Gameteki.Data.Models.GametekiUserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("CrimsonDev.Gameteki.Data.Models.LobbyMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("MessageDateTime");

                    b.Property<string>("MessageText");

                    b.Property<bool>("Removed");

                    b.Property<string>("RemovedById");

                    b.Property<DateTime>("RemovedDateTime");

                    b.Property<string>("SenderId");

                    b.HasKey("Id");

                    b.HasIndex("RemovedById");

                    b.HasIndex("SenderId");

                    b.ToTable("LobbyMessage");
                });

            modelBuilder.Entity("CrimsonDev.Gameteki.Data.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatePublished");

                    b.Property<string>("PosterId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("PosterId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("CrimsonDev.Gameteki.Data.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Expires");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("LastUsed");

                    b.Property<string>("Token");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("CrimsonDev.Throneteki.Data.GameData.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Cost");

                    b.Property<int>("DeckLimit");

                    b.Property<int>("FactionId");

                    b.Property<string>("Label");

                    b.Property<bool>("Loyal");

                    b.Property<string>("Name");

                    b.Property<int>("PackId");

                    b.Property<string>("Strength");

                    b.Property<string>("Text");

                    b.Property<string>("Traits");

                    b.Property<string>("Type");

                    b.Property<bool>("Unique");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("FactionId");

                    b.HasIndex("PackId");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("CrimsonDev.Throneteki.Data.GameData.Faction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("Faction");
                });

            modelBuilder.Entity("CrimsonDev.Throneteki.Data.GameData.Pack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("ReleaseDate");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("Pack");
                });

            modelBuilder.Entity("CrimsonDev.Throneteki.Data.GameData.RestrictedListEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.ToTable("RestrictedListEntry");
                });

            modelBuilder.Entity("CrimsonDev.Throneteki.Data.GameData.RestrictedListJoustCard", b =>
                {
                    b.Property<int>("RestrictedListEntryId");

                    b.Property<int>("CardId");

                    b.HasKey("RestrictedListEntryId", "CardId");

                    b.HasIndex("CardId");

                    b.ToTable("RestrictedListJoustCard");
                });

            modelBuilder.Entity("CrimsonDev.Throneteki.Data.GameData.RestrictedListMeleeCard", b =>
                {
                    b.Property<int>("RestrictedListEntryId");

                    b.Property<int>("CardId");

                    b.HasKey("RestrictedListEntryId", "CardId");

                    b.HasIndex("CardId");

                    b.ToTable("RestrictedListMeleeCard");
                });

            modelBuilder.Entity("CrimsonDev.Throneteki.Data.Models.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("FactionId");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Name");

                    b.Property<string>("OwnerId");

                    b.HasKey("Id");

                    b.HasIndex("FactionId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Deck");
                });

            modelBuilder.Entity("CrimsonDev.Throneteki.Data.Models.DeckCard", b =>
                {
                    b.Property<int>("DeckId");

                    b.Property<int>("CardId");

                    b.Property<int>("CardType");

                    b.Property<int>("Count");

                    b.HasKey("DeckId", "CardId");

                    b.HasIndex("CardId");

                    b.ToTable("DeckCard");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("CrimsonDev.Gameteki.Data.Models.BlockListEntry", b =>
                {
                    b.HasOne("CrimsonDev.Gameteki.Data.Models.GametekiUser", "User")
                        .WithMany("BlockList")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CrimsonDev.Gameteki.Data.Models.GametekiUser", b =>
                {
                    b.OwnsOne("CrimsonDev.Gameteki.Data.Models.UserSettings", "Settings", b1 =>
                        {
                            b1.Property<string>("GametekiUserId");

                            b1.Property<string>("Background")
                                .ValueGeneratedOnAdd()
                                .HasDefaultValue("BG1");

                            b1.Property<string>("CardSize")
                                .ValueGeneratedOnAdd()
                                .HasDefaultValue("normal");

                            b1.Property<bool>("EnableGravatar");

                            b1.HasKey("GametekiUserId");

                            b1.ToTable("Users");

                            b1.HasOne("CrimsonDev.Gameteki.Data.Models.GametekiUser")
                                .WithOne("Settings")
                                .HasForeignKey("CrimsonDev.Gameteki.Data.Models.UserSettings", "GametekiUserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("CrimsonDev.Gameteki.Data.Models.GametekiUserRole", b =>
                {
                    b.HasOne("CrimsonDev.Gameteki.Data.Models.GametekiRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrimsonDev.Gameteki.Data.Models.GametekiUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrimsonDev.Gameteki.Data.Models.LobbyMessage", b =>
                {
                    b.HasOne("CrimsonDev.Gameteki.Data.Models.GametekiUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");

                    b.HasOne("CrimsonDev.Gameteki.Data.Models.GametekiUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("CrimsonDev.Gameteki.Data.Models.News", b =>
                {
                    b.HasOne("CrimsonDev.Gameteki.Data.Models.GametekiUser", "Poster")
                        .WithMany()
                        .HasForeignKey("PosterId");
                });

            modelBuilder.Entity("CrimsonDev.Gameteki.Data.Models.RefreshToken", b =>
                {
                    b.HasOne("CrimsonDev.Gameteki.Data.Models.GametekiUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CrimsonDev.Throneteki.Data.GameData.Card", b =>
                {
                    b.HasOne("CrimsonDev.Throneteki.Data.GameData.Faction", "Faction")
                        .WithMany()
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrimsonDev.Throneteki.Data.GameData.Pack", "Pack")
                        .WithMany("Cards")
                        .HasForeignKey("PackId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("CrimsonDev.Throneteki.Data.GameData.CardIcons", "Icons", b1 =>
                        {
                            b1.Property<int>("CardId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<bool>("Intrigue");

                            b1.Property<bool>("Military");

                            b1.Property<bool>("Power");

                            b1.HasKey("CardId");

                            b1.ToTable("Card");

                            b1.HasOne("CrimsonDev.Throneteki.Data.GameData.Card")
                                .WithOne("Icons")
                                .HasForeignKey("CrimsonDev.Throneteki.Data.GameData.CardIcons", "CardId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("CrimsonDev.Throneteki.Data.GameData.PlotStats", "PlotStats", b1 =>
                        {
                            b1.Property<int>("CardId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Claim");

                            b1.Property<string>("Income");

                            b1.Property<string>("Initiative");

                            b1.Property<string>("Reserve");

                            b1.HasKey("CardId");

                            b1.ToTable("Card");

                            b1.HasOne("CrimsonDev.Throneteki.Data.GameData.Card")
                                .WithOne("PlotStats")
                                .HasForeignKey("CrimsonDev.Throneteki.Data.GameData.PlotStats", "CardId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("CrimsonDev.Throneteki.Data.GameData.RestrictedListJoustCard", b =>
                {
                    b.HasOne("CrimsonDev.Throneteki.Data.GameData.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrimsonDev.Throneteki.Data.GameData.RestrictedListEntry", "RestrictedListEntry")
                        .WithMany("JoustCards")
                        .HasForeignKey("RestrictedListEntryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrimsonDev.Throneteki.Data.GameData.RestrictedListMeleeCard", b =>
                {
                    b.HasOne("CrimsonDev.Throneteki.Data.GameData.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrimsonDev.Throneteki.Data.GameData.RestrictedListEntry", "RestrictedListEntry")
                        .WithMany("MeleeCards")
                        .HasForeignKey("RestrictedListEntryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrimsonDev.Throneteki.Data.Models.Deck", b =>
                {
                    b.HasOne("CrimsonDev.Throneteki.Data.GameData.Faction", "Faction")
                        .WithMany()
                        .HasForeignKey("FactionId");

                    b.HasOne("CrimsonDev.Gameteki.Data.Models.GametekiUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("CrimsonDev.Throneteki.Data.Models.DeckCard", b =>
                {
                    b.HasOne("CrimsonDev.Throneteki.Data.GameData.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrimsonDev.Throneteki.Data.Models.Deck", "Deck")
                        .WithMany("DeckCards")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CrimsonDev.Gameteki.Data.Models.GametekiRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CrimsonDev.Gameteki.Data.Models.GametekiUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CrimsonDev.Gameteki.Data.Models.GametekiUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CrimsonDev.Gameteki.Data.Models.GametekiUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
